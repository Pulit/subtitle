/*
 *  This file is part of the noOp organization .
 *
 *  (c) Cyrille Lebeaupin <clebeaupin@noop.fr>
 *
 *  For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 *
 */

package fr.noop.subtitle.ass;

import fr.noop.subtitle.model.SubtitleCue;
import fr.noop.subtitle.model.SubtitleLine;
import fr.noop.subtitle.model.SubtitleObject;
import fr.noop.subtitle.model.SubtitleRegionCue;
import fr.noop.subtitle.model.SubtitleStyled;
import fr.noop.subtitle.model.SubtitleText;
import fr.noop.subtitle.model.SubtitleWriter;
import fr.noop.subtitle.util.SubtitleStyle;
import fr.noop.subtitle.util.SubtitleTimeCode;
import fr.noop.subtitle.util.SubtitleRegion.VerticalAlign;
import fr.noop.subtitle.util.SubtitleStyle.FontStyle;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;

public class AssWriter implements SubtitleWriter {
    private String charset; // Charset used to encode file

    public AssWriter(String charset) {
        this.charset = charset;
    }

    @Override
    public void write(SubtitleObject subtitleObject, OutputStream os) throws IOException {
        try {
            // Write header
            os.write(new String("[Script Info]\n\n; Script generated by nomalab subtitle.\n\n").getBytes(this.charset));
            os.write(new String("[V4+ Styles]\n\n").getBytes(this.charset));
            os.write(new String("Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n\n").getBytes(this.charset));
            os.write(new String("Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0\n\n").getBytes(this.charset));
            os.write(new String("[Events]\n\n").getBytes(this.charset));
            os.write(new String("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n\n").getBytes(this.charset));
            

            // Write cues
            for (SubtitleCue cue : subtitleObject.getCues()) {
                // Dialogue: 0,0:00:25.04,0:00:27.04,Default,,0,0,0,,- Les hommes sont des pollueurs.
                // Write Start time and end time
                String cueText = "";
                for (SubtitleLine line : cue.getLines()){
                    for (SubtitleText text : line.getTexts()){
                        if (cueText != ""){
                            cueText += "\\N" + text.toString();     
                        }
                        else cueText += text.toString();
                    }
                }
                
                
                String startToEnd = String.format("Dialogue: 0,%s,%s,Default,,0,0,0,,%s\n",
                        this.formatTimeCode(cue.getStartTime()),
                        this.formatTimeCode(cue.getEndTime()),
                        cueText);

                os.write(startToEnd.getBytes(this.charset));
            }
        } catch (UnsupportedEncodingException e) {
            throw new IOException("Encoding error in input subtitle");
        }
    }

    // 0:00:00.00
    private String formatTimeCode(SubtitleTimeCode timeCode) {
        return String.format("%02d:%02d:%02d.%03d",
                timeCode.getHour(),
                timeCode.getMinute(),
                timeCode.getSecond(),
                timeCode.getMillisecond());
    }
}
